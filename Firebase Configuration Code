// Firebase configuration (Replace the values with your actual Firebase credentials)
const firebaseConfig = {
  apiKey: "YOUR_API_KEY_HERE", // Replace with your API Key
  authDomain: "YOUR_AUTH_DOMAIN_HERE", // Replace with your Auth Domain
  projectId: "YOUR_PROJECT_ID_HERE", // Replace with your Project ID
  storageBucket: "YOUR_STORAGE_BUCKET_HERE", // Replace with your Storage Bucket
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID_HERE", // Replace with your Messaging Sender ID
  appId: "YOUR_APP_ID_HERE", // Replace with your App ID
  measurementId: "YOUR_MEASUREMENT_ID_HERE" // Replace with your Measurement ID
};

// Initialize Firebase with your Firebase configuration
firebase.initializeApp(firebaseConfig);

// Reference to Firebase Realtime Database
const dbRef = firebase.database().ref();

// Get the chart elements
const soilMoistureCtx = document.getElementById('soilMoistureChart').getContext('2d');
const rainDetectionCtx = document.getElementById('rainDetectionChart').getContext('2d');

// Initialize charts
let soilMoistureChart = new Chart(soilMoistureCtx, {
  type: 'line',
  data: {
    labels: [],
    datasets: [{
      label: 'Soil Moisture (%)',
      data: [],
      borderColor: '#4CAF50',
      backgroundColor: 'rgba(76, 175, 80, 0.3)',
      fill: true,
      lineTension: 0.4,
    }]
  },
  options: {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true,
        max: 100,
        ticks: {
          stepSize: 20
        }
      }
    }
  }
});

let rainDetectionChart = new Chart(rainDetectionCtx, {
  type: 'line',
  data: {
    labels: [],
    datasets: [{
      label: 'Rain Detection (0 = No, 1 = Yes)',
      data: [],
      borderColor: '#FF5722',
      backgroundColor: 'rgba(255, 87, 34, 0.3)',
      fill: true,
      lineTension: 0.4,
    }]
  },
  options: {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true,
        max: 1,
        ticks: {
          stepSize: 0.2
        }
      }
    }
  }
});

// Listen for data updates from Firebase
dbRef.on('value', (snapshot) => {
  const data = snapshot.val();
  const timestamp = new Date().toLocaleTimeString();

  // Update soil moisture chart
  if (data && data.soilMoisture !== undefined) {
    soilMoistureChart.data.labels.push(timestamp);
    soilMoistureChart.data.datasets[0].data.push(data.soilMoisture);
    if (soilMoistureChart.data.labels.length > 10) {
      soilMoistureChart.data.labels.shift();
      soilMoistureChart.data.datasets[0].data.shift();
    }
    soilMoistureChart.update();
  }

  // Update rain detection chart
  if (data && data.rainDetection !== undefined) {
    rainDetectionChart.data.labels.push(timestamp);
    rainDetectionChart.data.datasets[0].data.push(data.rainDetection);
    if (rainDetectionChart.data.labels.length > 10) {
      rainDetectionChart.data.labels.shift();
      rainDetectionChart.data.datasets[0].data.shift();
    }
    rainDetectionChart.update();
  }

  // Display email alert if necessary
  if (data && data.soilMoisture < 30) {  // Example: soil moisture under 30% triggers alert
    document.getElementById('alert').innerText = 'Alert: Soil moisture is too low!';
    sendEmailAlert();
  } else {
    document.getElementById('alert').innerText = '';
  }
});

// Send email alert function (you will need a backend service for sending emails)
function sendEmailAlert() {
  const emailContent = "Soil moisture is critically low! Please check your system.";
  
  // Email sending via Gmail or other service (This should be implemented in a backend server)
  // Example: Make an HTTP request to send the email (implementation needed)
  console.log("Sending email alert:", emailContent);
}
